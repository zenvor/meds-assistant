<!DOCTYPE html>
<html lang="zh-CN">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>您的个人用药提醒助手 (Notion 版)</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Noto+Sans+SC:wght@300;400;500;700&display=swap"
      rel="stylesheet"
    />
    <style>
      body {
        font-family: 'Noto Sans SC', sans-serif;
        background-color: #f7f7f5; /* Notion-like off-white */
        color: #37352f; /* Notion-like text color */
      }
      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(10px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
      .fade-in {
        animation: fadeIn 0.5s ease-out forwards;
      }

      .tab-button {
        transition: all 0.2s ease;
        border-bottom: 2px solid transparent;
      }
      .tab-button.active {
        color: #37352f;
        border-bottom-color: #37352f;
      }
      .tab-button:not(.active) {
        color: #9b9a97;
      }
      .tab-panel {
        display: none;
        animation: fadeIn 0.3s ease;
      }
      .tab-panel.active {
        display: block;
      }

      .med-card {
        transition: background-color 0.2s ease;
        border: 1px solid #e3e2e0;
      }

      .progress-bar-fill {
        transition: width 0.5s ease-in-out;
        background-color: #4582e8; /* Notion-like blue */
      }

      #taken-meds-content {
        max-height: 0;
        overflow: hidden;
        transition: max-height 0.4s ease-in-out;
      }

      #taken-meds-container {
        max-height: 50vh;
        overflow-y: auto;
      }

      #taken-meds-container::-webkit-scrollbar {
        width: 5px;
      }
      #taken-meds-container::-webkit-scrollbar-track {
        background: #f7f7f5;
      }
      #taken-meds-container::-webkit-scrollbar-thumb {
        background: #dcdbd9;
        border-radius: 10px;
      }

      .category-title {
        font-size: 0.75rem; /* 12px */
        font-weight: 500;
        color: #9b9a97;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        margin-top: 1.25rem;
        margin-bottom: 0.75rem;
        padding-left: 0.25rem;
      }
    </style>
  </head>

  <body class="antialiased">
    <main class="container mx-auto p-4 md:p-8 max-w-2xl">
      <header class="text-center mb-10 fade-in">
        <h1 class="text-3xl md:text-4xl font-bold text-slate-800">个人用药提醒助手</h1>
        <p id="current-date" class="text-base text-slate-500 mt-2 font-normal"></p>
        <p id="current-time" class="text-5xl font-bold text-slate-700 tracking-wider mt-1"></p>
      </header>

      <div
        class="bg-white p-5 rounded-lg border border-gray-200/80 shadow-sm mb-8 fade-in"
        style="animation-delay: 100ms"
      >
        <div class="flex justify-between items-center mb-2 text-sm">
          <span class="font-semibold text-slate-700">今日进度</span>
          <span id="progress-text" class="font-semibold text-slate-500">0 / 10</span>
        </div>
        <div class="w-full bg-gray-200 rounded-full h-2 overflow-hidden">
          <div id="progress-bar" class="h-2 rounded-full progress-bar-fill" style="width: 0%"></div>
        </div>
      </div>

      <!-- Taken Meds Accordion -->
      <div
        id="taken-meds-accordion"
        class="bg-white rounded-lg border border-gray-200/80 shadow-sm mb-8 fade-in"
        style="animation-delay: 200ms"
      >
        <button id="taken-meds-header" class="w-full p-4 flex justify-between items-center cursor-pointer">
          <div class="flex items-center gap-2">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="16"
              height="16"
              fill="currentColor"
              class="text-green-500"
              viewBox="0 0 16 16"
            >
              <path
                d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"
              />
            </svg>
            <h2 class="text-base font-semibold text-slate-700">今日已服用</h2>
          </div>
          <div class="flex items-center gap-2">
            <span id="taken-summary" class="text-slate-500 font-medium text-sm"></span>
            <svg
              id="accordion-arrow"
              xmlns="http://www.w3.org/2000/svg"
              width="16"
              height="16"
              fill="currentColor"
              class="bi bi-chevron-down text-slate-500 transition-transform duration-300"
              viewBox="0 0 16 16"
            >
              <path
                fill-rule="evenodd"
                d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708"
              />
            </svg>
          </div>
        </button>
        <div id="taken-meds-content">
          <div id="taken-meds-container" class="space-y-2 p-4 pt-0">
            <!-- Taken meds will be dynamically inserted here -->
          </div>
        </div>
      </div>

      <!-- Tabs for Medication Slots -->
      <div class="fade-in" style="animation-delay: 300ms">
        <div id="tab-buttons" class="flex gap-4 border-b border-gray-200 mb-6">
          <!-- Tab buttons will be generated here -->
        </div>
        <div id="tab-panels">
          <!-- Tab panels will be generated here -->
        </div>
      </div>

      <footer class="text-center mt-12 space-y-4">
        <button id="notification-btn" class="text-sm text-slate-500 hover:text-blue-600 transition-colors">
          开启提醒
        </button>
        <p id="notification-warning" class="text-xs text-slate-400 hidden">
          提醒功能在浏览器后台时可能因手机省电策略而延迟，建议将本页加入白名单。
        </p>
        <button id="reset-btn" class="text-sm text-slate-500 hover:text-red-600 transition-colors">重置今日</button>
      </footer>
    </main>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const svgIcons = {
          sucralfate: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M17.5 2H6.5C5.67 2 5 2.67 5 3.5v17c0 .83.67 1.5 1.5 1.5h11c.83 0 1.5-.67 1.5-1.5v-17c0-.83-.67-1.5-1.5-1.5zM17 4h-2V3h2v1z" fill-rule="evenodd" clip-rule="evenodd" fill="#f472b6"/></svg>`,
          mosapride: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M19.98 12.63c.09-.22.14-.45.14-.7a2.53 2.53 0 00-2.62-2.5A2.53 2.53 0 0015 11.93c0 .25.05.48.14.7L12 14.5l-3.14-2.17c.09-.22.14-.45.14-.7a2.53 2.53 0 00-2.62-2.5A2.53 2.53 0 004 11.93c0 .25.05.48.14.7L12 20l7.98-7.37zM12 4L4 9.37V20h16V9.37L12 4z" fill="#38bdf8"/></svg>`,
          careprazen: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12 2a10 10 0 100 20 10 10 0 000-20zm0 17.5c-1.96 0-3.73-.91-4.88-2.34a.75.75 0 011.06-1.06c.82.82 2.05 1.32 3.39 1.32s2.57-.5 3.39-1.32a.75.75 0 111.06 1.06A6.97 6.97 0 0112 19.5z" fill="#818cf8"/></svg>`,
          tcm_leaf: `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M17 9c.83 0 1.5-.67 1.5-1.5S17.83 6 17 6s-1.5.67-1.5 1.5S16.17 9 17 9zm-5.5-6C9.15 3 7.31 4.85 7.31 7.19c0 .34.04.67.11.99L3 12.62 10.38 22l8.62-8-3.5-3.5c-.48-.48-1.13-.75-1.81-.75-1.42 0-2.58 1.16-2.58 2.58 0 .21.03.42.08.62l-2.69 2.69L12 15.5l-3.5-3.5.78-.78c.7-.7.7-1.84 0-2.54s-1.84-.7-2.54 0L6 9.46c-.09-.3-.14-.62-.14-.95C5.86 4.69 7.55 3 9.5 3c.96 0 1.84.42 2.5.99L13.5 5.5l1.5-1.5c.66-.61 1.54-.99 2.5-.99 1.95 0 3.5 1.55 3.5 3.5V7c0 .83-.67 1.5-1.5 1.5S18 7.83 18 7V6.5c0-1.38-1.12-2.5-2.5-2.5S13.12 4.62 13.12 6c0 .28.05.55.13.8l-1.43 1.43L10.5 7.02c.07-.21.1-.42.1-.64.01-1.33-1-2.43-2.31-2.54.54-.42 1.21-.65 1.92-.65z" fill="#10b981"/></svg>`,
          undo: `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8 3a5 5 0 1 1-4.546 2.914.5.5 0 0 0 .908-.417A4 4 0 1 0 8 4z"/><path d="M8.354.146a.5.5 0 0 0-.708 0l-1.5 1.5a.5.5 0 0 0 .708.708L8 1.707l1.146 1.147a.5.5 0 0 0 .708-.708zM8 1.5V11a.5.5 0 0 0 1 0V1.5a.5.5 0 0 0-1 0z"/></svg>`,
        }
        const medicationSchedule = [
          // 胃肠道
          {
            id: 'sucralfate_1',
            name: '硫糖铝混悬凝胶',
            dose: '1袋',
            slot: 'morning',
            time: '06:00',
            category: '胃肠道用药',
            iconKey: 'sucralfate',
            timing: '起床后空腹',
          },
          {
            id: 'mosapride_1',
            name: '枸橼酸莫沙必利片',
            dose: '1片',
            slot: 'morning',
            time: '08:10',
            category: '胃肠道用药',
            iconKey: 'mosapride',
            timing: '早餐前20分钟',
          },
          {
            id: 'sucralfate_2',
            name: '硫糖铝混悬凝胶',
            dose: '1袋',
            slot: 'morning',
            time: '10:30',
            category: '胃肠道用药',
            iconKey: 'sucralfate',
            timing: '空腹',
          },
          {
            id: 'mosapride_2',
            name: '枸橼酸莫沙必利片',
            dose: '1片',
            slot: 'noon',
            time: '12:10',
            category: '胃肠道用药',
            iconKey: 'mosapride',
            timing: '午餐前20分钟',
          },
          {
            id: 'sucralfate_3',
            name: '硫糖铝混悬凝胶',
            dose: '1袋',
            slot: 'noon',
            time: '16:30',
            category: '胃肠道用药',
            iconKey: 'sucralfate',
            timing: '空腹',
          },
          {
            id: 'mosapride_3',
            name: '枸橼酸莫沙必利片',
            dose: '1片',
            slot: 'evening',
            time: '18:10',
            category: '胃肠道用药',
            iconKey: 'mosapride',
            timing: '晚餐前20分钟',
          },
          {
            id: 'careprazen_1',
            name: '盐酸凯普拉生片',
            dose: '2片',
            slot: 'evening',
            time: '23:30',
            category: '胃肠道用药',
            iconKey: 'careprazen',
            timing: '睡前',
          },
          // 前列腺
          {
            id: 'pulean_1',
            name: '普乐安片',
            dose: '按说明',
            slot: 'morning',
            time: '09:00',
            category: '前列腺用药',
            iconKey: 'tcm_leaf',
            timing: '早餐后半小时',
          },
          {
            id: 'pulean_2',
            name: '普乐安片',
            dose: '按说明',
            slot: 'noon',
            time: '13:00',
            category: '前列腺用药',
            iconKey: 'tcm_leaf',
            timing: '午餐后半小时',
          },
          {
            id: 'pulean_3',
            name: '普乐安片',
            dose: '按说明',
            slot: 'evening',
            time: '19:00',
            category: '前列腺用药',
            iconKey: 'tcm_leaf',
            timing: '晚餐后半小时',
          },
        ]
        const slotsConfig = {
          morning: { label: '早上', icon: '☀️', startHour: 6, endHour: 11 },
          noon: { label: '中午', icon: '🕛', startHour: 11, endHour: 17 },
          evening: { label: '晚上', icon: '🌙', startHour: 17, endHour: 23 },
        }
        const categoryOrder = ['胃肠道用药', '前列腺用药']
        const totalDoses = medicationSchedule.length
        const iconColors = {
          sucralfate: 'bg-rose-100',
          mosapride: 'bg-sky-100',
          careprazen: 'bg-indigo-100',
          tcm_leaf: 'bg-green-100',
        }
        let currentTab = 'morning'
        let notificationTimeoutId = null

        function getTodayKey(prefix) {
          const now = new Date()
          return `${prefix}-${now.getFullYear()}-${now.getMonth()}-${now.getDate()}`
        }
        let takenState = JSON.parse(localStorage.getItem(getTodayKey('medTakenState'))) || {}
        function saveState(key, state) {
          localStorage.setItem(getTodayKey(key), JSON.stringify(state))
        }

        function renderAll() {
          const tabButtonsContainer = document.getElementById('tab-buttons')
          const tabPanelsContainer = document.getElementById('tab-panels')
          const takenContainer = document.getElementById('taken-meds-container')

          tabButtonsContainer.innerHTML = ''
          tabPanelsContainer.innerHTML = ''
          takenContainer.innerHTML = ''

          renderTabsAndPanels(tabButtonsContainer, tabPanelsContainer)
          renderTakenMeds(takenContainer)
          updateProgress()
          switchTab(currentTab)
        }

        function renderTabsAndPanels(buttonsContainer, panelsContainer) {
          Object.keys(slotsConfig).forEach((slotKey) => {
            const config = slotsConfig[slotKey]
            const upcomingInSlot = medicationSchedule.filter((med) => med.slot === slotKey && !takenState[med.id])

            const button = document.createElement('button')
            button.className = 'tab-button p-3 text-sm font-medium'
            button.dataset.slot = slotKey
            button.innerHTML = `<span>${
              config.label
            }</span> <span class="text-xs font-mono ml-1 px-1.5 py-0.5 rounded-md ${
              upcomingInSlot.length > 0 ? 'bg-gray-200' : 'bg-green-100 text-green-700'
            }">${upcomingInSlot.length}</span>`
            buttonsContainer.appendChild(button)

            const panel = document.createElement('div')
            panel.id = `panel-${slotKey}`
            panel.className = 'tab-panel'

            if (upcomingInSlot.length === 0) {
              panel.innerHTML = `<div class="text-center p-8 bg-white rounded-lg border border-gray-200/80"><p class="text-base text-slate-500">此时间段药物已全部服用</p></div>`
            } else {
              const groupedByTime = upcomingInSlot.reduce((acc, med) => {
                ;(acc[med.time] = acc[med.time] || []).push(med)
                return acc
              }, {})

              let panelHtml = '<div class="space-y-6">'
              const timeKeys = Object.keys(groupedByTime).sort()

              timeKeys.forEach((time) => {
                const medsForTime = groupedByTime[time]
                const groupedByCategory = medsForTime.reduce((acc, med) => {
                  ;(acc[med.category] = acc[med.category] || []).push(med)
                  return acc
                }, {})

                panelHtml += `<div><h3 class="text-base font-semibold text-slate-600 mb-3 ml-1">${time}</h3><div class="space-y-3">`

                const categories = Object.keys(groupedByCategory).sort(
                  (a, b) => categoryOrder.indexOf(a) - categoryOrder.indexOf(b)
                )
                categories.forEach((category, index) => {
                  panelHtml += `<div class="${index > 0 ? 'mt-4' : ''}">`
                  panelHtml += `<h4 class="category-title">${category}</h4>`
                  panelHtml += groupedByCategory[category]
                    .map(
                      (med) => `
                                <div class="med-card-wrapper">
                                  <div class="med-card bg-white p-4 rounded-lg flex items-center">
                                      <div class="mr-4 w-10 h-10 flex-shrink-0 rounded-lg flex items-center justify-center ${
                                        iconColors[med.iconKey]
                                      }">${svgIcons[med.iconKey]}</div>
                                      <div class="flex-grow">
                                          <p class="font-semibold text-sm text-slate-800 med-name">${med.name}</p>
                                          <p class="text-xs text-slate-500 mt-1">${med.timing} · ${med.dose}</p>
                                      </div>
                                      <input type="checkbox" data-dose-id="${
                                        med.id
                                      }" class="h-5 w-5 rounded border-gray-300 text-blue-500 focus:ring-blue-400 cursor-pointer">
                                  </div>
                                </div>`
                    )
                    .join('')
                  panelHtml += `</div>`
                })
                panelHtml += `</div></div>`
              })
              panelHtml += '</div>'
              panel.innerHTML = panelHtml
            }
            panelsContainer.appendChild(panel)
          })
          if (medicationSchedule.filter((m) => !takenState[m.id]).length === 0) {
            panelsContainer.innerHTML = `<div class="text-center p-10 bg-white rounded-2xl "><p class="text-xl text-teal-600 font-semibold">🎉 恭喜！今日药物已全部服用完毕！</p></div>`
          }
        }

        function renderTakenMeds(container) {
          const takenMeds = medicationSchedule.filter((med) => takenState[med.id])
          document.getElementById('taken-summary').textContent = `${takenMeds.length} / ${totalDoses}`

          if (takenMeds.length === 0) {
            container.innerHTML = `<p class="text-slate-400 text-center py-4 text-sm">暂无已服用记录</p>`
          } else {
            container.innerHTML = ''
            takenMeds
              .sort((a, b) => {
                const slotOrder = { morning: 1, noon: 2, evening: 3 }
                if (slotOrder[a.slot] !== slotOrder[b.slot]) {
                  return slotOrder[a.slot] - slotOrder[b.slot]
                }
                return a.time.localeCompare(b.time)
              })
              .forEach((med) => {
                const takenCard = document.createElement('div')
                takenCard.className =
                  'slide-in-down bg-white p-3 rounded-lg flex items-center gap-3 text-sm border border-gray-200/80'
                takenCard.innerHTML = `
                        <div class="w-8 h-8 flex-shrink-0 rounded-lg flex items-center justify-center ${
                          iconColors[med.iconKey]
                        }">${svgIcons[med.iconKey]}</div>
                        <div class="flex-grow">
                            <p class="font-medium text-slate-700">${med.name}</p>
                            <p class="text-xs text-slate-500">${med.time} - ${med.dose}</p>
                        </div>
                        <button class="undo-button p-1.5 rounded-full hover:bg-gray-200 text-slate-500 hover:text-slate-800 transition-colors" data-dose-id="${
                          med.id
                        }" title="撤销服用">${svgIcons['undo']}</button>`
                container.appendChild(takenCard)
              })
          }
        }

        function switchTab(slotKey) {
          document.querySelectorAll('.tab-button').forEach((b) => b.classList.remove('active'))
          const activeButton = document.querySelector(`.tab-button[data-slot="${slotKey}"]`)
          if (activeButton) activeButton.classList.add('active')

          document.querySelectorAll('.tab-panel').forEach((p) => p.classList.remove('active'))
          const activePanel = document.getElementById(`panel-${slotKey}`)
          if (activePanel) activePanel.classList.add('active')
        }

        function updateProgress() {
          const takenCount = Object.values(takenState).filter(Boolean).length
          const progress = totalDoses > 0 ? (takenCount / totalDoses) * 100 : 0
          document.getElementById('progress-bar').style.width = `${progress}%`
          document.getElementById('progress-text').textContent = `${takenCount} / ${totalDoses}`
        }

        function updateTimeDisplay() {
          const now = new Date()
          const dateOptions = { year: 'numeric', month: 'long', day: 'numeric', weekday: 'long' }
          document.getElementById('current-date').textContent = now.toLocaleDateString('zh-CN', dateOptions)
          document.getElementById('current-time').textContent = now.toLocaleTimeString('zh-CN', {
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
          })
        }

        let initialTabSet = false
        function setInitialTab() {
          if (initialTabSet) return
          const currentHour = new Date().getHours()
          if (currentHour >= slotsConfig.noon.startHour && currentHour < slotsConfig.evening.startHour) {
            currentTab = 'noon'
          } else if (currentHour >= slotsConfig.evening.startHour || currentHour < slotsConfig.morning.startHour) {
            currentTab = 'evening'
          } else {
            currentTab = 'morning'
          }
          switchTab(currentTab)
          initialTabSet = true
        }

        function scheduleNextNotification() {
          if (notificationTimeoutId) clearTimeout(notificationTimeoutId)
          if (Notification.permission !== 'granted') return

          const now = new Date()
          let nextNotificationTime = null
          let nextSlotKey = null

          const slotKeys = ['morning', 'noon', 'evening']
          for (const key of slotKeys) {
            const slotStartTime = new Date()
            slotStartTime.setHours(slotsConfig[key].startHour, 0, 0, 0)

            if (slotStartTime > now) {
              const upcomingInSlot = medicationSchedule.filter((med) => med.slot === key && !takenState[med.id])
              if (upcomingInSlot.length > 0) {
                nextNotificationTime = slotStartTime
                nextSlotKey = key
                break
              }
            }
          }

          if (nextNotificationTime) {
            const delay = nextNotificationTime.getTime() - now.getTime()
            notificationTimeoutId = setTimeout(() => {
              const slot = slotsConfig[nextSlotKey]
              const medsInSlot = medicationSchedule.filter((med) => med.slot === nextSlotKey && !takenState[med.id])
              new Notification(`该服用${slot.label}的药了！`, {
                body: `您有 ${medsInSlot.length} 种药物需要服用。`,
                tag: `med-reminder-${nextSlotKey}`,
              })
              scheduleNextNotification()
            }, delay)
          }
        }

        // Single event listener for the whole app
        document.querySelector('main').addEventListener('click', (e) => {
          const target = e.target
          const checkbox = target.closest('input[type="checkbox"]')
          const undoButton = target.closest('.undo-button')
          const tabButton = target.closest('.tab-button')
          const accordionButton = target.closest('#taken-meds-header')
          const notificationButton = target.closest('#notification-btn')
          const resetButton = target.closest('#reset-btn')

          if (checkbox && checkbox.checked) {
            const doseId = checkbox.dataset.doseId
            takenState[doseId] = true
            saveState('medTakenState', takenState)
            const cardWrapper = checkbox.closest('.med-card-wrapper')
            if (cardWrapper) {
              cardWrapper.style.transition = 'all 0.4s ease'
              cardWrapper.style.transform = 'scale(0.9)'
              cardWrapper.style.opacity = '0'
            }
            setTimeout(() => {
              renderAll()
              scheduleNextNotification()
            }, 350)
          } else if (undoButton) {
            const doseId = undoButton.dataset.doseId
            delete takenState[doseId]
            saveState('medTakenState', takenState)
            renderAll()
            scheduleNextNotification()
          } else if (tabButton) {
            currentTab = tabButton.dataset.slot
            switchTab(currentTab)
          } else if (accordionButton) {
            const content = document.getElementById('taken-meds-content')
            const arrow = document.getElementById('accordion-arrow')
            const isExpanded = content.style.maxHeight && content.style.maxHeight !== '0px'
            if (isExpanded) {
              content.style.maxHeight = '0px'
            } else {
              const container = document.getElementById('taken-meds-container')
              content.style.maxHeight = container.scrollHeight + 'px'
            }
            arrow.classList.toggle('rotate-180')
          } else if (notificationButton) {
            const btn = document.getElementById('notification-btn')
            const warning = document.getElementById('notification-warning')
            if (Notification.permission === 'granted') {
              alert('提醒功能已经开启。')
              return
            }
            Notification.requestPermission().then((permission) => {
              if (permission === 'granted') {
                alert('浏览器提醒已开启！')
                btn.textContent = '提醒已开启'
                warning.classList.remove('hidden')
                scheduleNextNotification()
              } else {
                alert('您已阻止浏览器提醒。')
              }
            })
          } else if (resetButton) {
            if (confirm('您确定要清除今天所有的服药记录吗？')) {
              takenState = {}
              saveState('medTakenState', {})
              renderAll()
              scheduleNextNotification()
            }
          }
        })

        // Initial setup
        renderAll()
        setInitialTab()
        setInterval(updateTimeDisplay, 1000)
        if (Notification.permission === 'granted') {
          document.getElementById('notification-btn').textContent = '提醒已开启'
          document.getElementById('notification-warning').classList.remove('hidden')
          scheduleNextNotification()
        }
      })
    </script>
  </body>
</html>
